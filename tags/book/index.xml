<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Book on Jaeyeop&#39;s Notes</title>
    <link>https://jaeyeopme.github.io/tags/book/</link>
    <description>Recent content in Book on Jaeyeop&#39;s Notes</description>
    <image>
      <title>Jaeyeop&#39;s Notes</title>
      <url>https://jaeyeopme.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jaeyeopme.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 27 Oct 2022 00:08:57 +0900</lastBuildDate><atom:link href="https://jaeyeopme.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>단위 테스트 1장</title>
      <link>https://jaeyeopme.github.io/posts/%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-1%EC%9E%A5/</link>
      <pubDate>Thu, 27 Oct 2022 00:08:57 +0900</pubDate>
      
      <guid>https://jaeyeopme.github.io/posts/%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-1%EC%9E%A5/</guid>
      <description>1. 단위 테스트의 목표 단위 테스트에 시간을 투자할 때는 항상 노력은 가능한 줄이며 이득을 최대화해야 한다. 단위 테스트에 노력을 많이 들여도 많은 버그와 유지비로 진행은 느려진다. 균형을 달성한 프로젝트는 유지보수가 많이 필요하지 않으며, 변화하는 요구에 신속히 대응할 수 있다.
1.1 단위 테스트 현황 단위 테스트를 적용해야 하는지는 더 이상 논쟁거리가 아니다. 기업용 애플리케이션은 거의 모두 자동화된 단위 테스트가 있고, 통합 테스트를 통해 좋은 커버리지를 달성하고 있다. 그러나 좋지 않은 테스트라면 새로운 기능 구현이 더 오래 걸리고, 새로운 버그가 나타나는 등 테스트가 오히려 상황을 더 나쁘게 할 수 있다.</description>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>https://jaeyeopme.github.io/posts/solid/</link>
      <pubDate>Mon, 05 Sep 2022 23:00:00 +0000</pubDate>
      
      <guid>https://jaeyeopme.github.io/posts/solid/</guid>
      <description>SRP: 단일 책임 원칙 (Single responsibility principal) SRP는 단일 책임 원칙을 의미한다. SRP는 &amp;lsquo;하나의 객체가 하나의 책임만 져야 한다&amp;rsquo;는 의미이다. SRP는 클래스를 단 한 가지 목표만 가지고 작성해야 한다는 것을 의미한다. SRP는 애플리케이션 모듈 전반에서 높은 유지보수성과 가시성 제어 기능을 유지하는 원칙이다. 하나의 모듈은 하나의, 오직 하나의 액터에 대해서만 책임져야한다.
클린 아키텍처 66p
예제 SRP를 따르지 않는 경우 일반적으로 클래스가 수행하는 일을 표현하기 위해 &amp;lsquo;또한&amp;rsquo; 이라는 단어를 사용해야 한다면 SRP 원칙이 깨진 것이라고 할 수 있다.</description>
    </item>
    
  </channel>
</rss>
